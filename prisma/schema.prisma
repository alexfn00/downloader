// database
datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// generator
generator client {
  provider             = "prisma-client-js"
  recursive_type_depth = 5
  interface            = "sync"
}

model UserInfo {
  id    String @id @unique
  email String @unique

  Channels Channels[]
  Videos   Videos[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  created DateTime @default(now())
  updated DateTime @default(now())

  @@map("userinfo")
}

// data models
model Channels {
  id      String   @unique @map(name: "id")
  name    String   @map(name: "name")
  avatar  String   @map(name: "avatar")
  created DateTime @default(now())
  updated DateTime

  user   UserInfo? @relation(fields: [userId], references: [id])
  userId String?   @map(name: "user_id")

  videos Videos[]

  @@map("channels")
}

model Videos {
  id        Int      @id @default(autoincrement())
  title     String   @unique @map(name: "title")
  href      String   @map(name: "href")
  text      String?  @map(name: "text") @db.Text
  thumbnail String   @map(name: "thumbnail")
  period    String   @map(name: "period")
  published String   @map(name: "published")
  viewCount String   @map(name: "view_count")
  type      String   @map(name: "type")
  created   DateTime @default(now())
  updated   DateTime

  channels  Channels? @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId String?   @map(name: "channel_id")

  user   UserInfo? @relation(fields: [userId], references: [id])
  userId String?   @map(name: "user_id")

  @@map("videos")
}

model Task {
  id      Int      @id @default(autoincrement())
  task    String
  created DateTime @default(now())
  updated DateTime

  @@map("task")
}

model Anonymous {
  id      String   @id @default(cuid())
  created DateTime @default(now())
  updated DateTime

  @@map("anonymous")
}

model R2Bucket {
  id       Int      @id @default(autoincrement())
  r2       String
  fileName String   @map(name: "filename")
  size     Int?
  type     String?
  user_id  String?
  created  DateTime @default(now())
  updated  DateTime

  @@map("r2bucket")
}

model InstagramUser {
  id           String   @id @unique
  userName     String?  @unique @map(name: "username")
  userId       String?  @unique @map(name: "userid")
  mediacount   String   @unique
  followers    String   @unique
  followees    String   @unique
  biography    String   @unique
  external_url String   @unique
  pic_url      String   @unique
  created      DateTime @default(now())
  updated      DateTime

  InstagramPost InstagramPost[]

  @@map("instagramuser")
}

model InstagramPost {
  id               String @id @unique
  profile          String @unique
  url              String @unique
  caption          String @unique
  is_video         String @unique
  video_view_count String @unique
  likes            String @unique
  comments         String @unique
  caption_hashtags String @unique

  created DateTime @default(now())
  updated DateTime

  user   InstagramUser? @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userid String?

  @@map("instagrampost")
}

model MyTable {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)
  age  Int?

  @@map("my_table")
}
